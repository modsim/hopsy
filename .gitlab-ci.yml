image: quay.io/pypa/manylinux2014_x86_64

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - test
  - build-docs
  - upload-artifacts

pre-commit:
  image: python:3.10
  stage: build
  script:
    - pip install pre-commit
    - pre-commit install
    - pre-commit run --all

build-release:
  stage: build
  rules:
    - if: $CI_COMMIT_AUTHOR == "CI_BOT"
    - when: never
  parallel:
    matrix:
      #      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
      - PYTHON_VERSION: ["cp310-cp310"]
  environment: $PYTHON_VERSION
  script:
    - /opt/python/cp310-cp310/bin/python .check_version.py
    - git rev-parse --short HEAD > .commit
    - /opt/python/$PYTHON_VERSION/bin/pip wheel --no-deps . -w dist
    - VERSION=$(cat .version); auditwheel repair dist/hopsy-$VERSION-$PYTHON_VERSION-* -w dist
  artifacts:
    paths:
      - dist/*manylinux*
    expire_in: 7 days

#build-release-macos:
#  stage: build
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
#  tags:
#      - macos
#  parallel:
#    matrix:
#      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
#  environment: $PYTHON_VERSION
#  before_script:
#    - eval "$(pyenv init -)" && eval "$(pyenv virtualenv-init -)"
#    - pyenv activate $PYTHON_VERSION
#    - rm build dist -r || true
#  script:
#    - pyenv activate $PYTHON_VERSION && python setup.py bdist_wheel
#    - VERSION=$(cat .version); delocate-wheel -v dist/hopsy-$VERSION-$PYTHON_VERSION-*
#  artifacts:
#    paths:
#      - dist/*
#    expire_in: 7 days

#build-debug:
#  stage: build
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
#  parallel:
#    matrix:
#      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
#  environment: $PYTHON_VERSION
#  script:
#    - /opt/python/cp310-cp310/bin/python .check_version.py
#    - git rev-parse --short HEAD > .commit
#    - echo "$(cat .version).dev0" > .version
#    - sed -i 's/debug = 0/debug = 1/g' setup.cfg
#    - /opt/python/$PYTHON_VERSION/bin/pip wheel --no-deps . -w dist
#    - VERSION=$(cat .version); auditwheel repair dist/hopsy-$VERSION-$PYTHON_VERSION-* -w dist
#  artifacts:
#    paths:
#      - dist/*manylinux*
#    expire_in: 7 days
#

test-release:
  stage: test
  rules:
    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
    - when: never
  dependencies:
    - build-release
  parallel:
    matrix:
#      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
      - PYTHON_VERSION: ["cp310-cp310"]
  environment: $PYTHON_VERSION
  before_script:
    - /opt/python/$PYTHON_VERSION/bin/python -m pip install docov
  script:
    - VERSION=$(cat .version); /opt/python/$PYTHON_VERSION/bin/python -m pip install dist/hopsy-$VERSION-$PYTHON_VERSION-manylinux*.whl
    - VERSION=$(cat .version); /opt/python/$PYTHON_VERSION/bin/python -m unittest -v tests
  artifacts:
    paths:
      - dist
    expire_in: 7 days

#test-release-macos:
#  stage: test
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
#  tags:
#      - macos
#  dependencies:
#    - build-release-macos
#  parallel:
#    matrix:
#      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
#  environment: $PYTHON_VERSION
#  before_script:
#    - eval "$(pyenv init -)" && eval "$(pyenv virtualenv-init -)"
#    - pyenv activate $PYTHON_VERSION
#    - python -m pip install docov
#  script:
#    - VERSION=$(cat .version); python -m pip install dist/hopsy-$VERSION-$PYTHON_VERSION-*macosx*arm64.whl --force-reinstall
#    - VERSION=$(cat .version); python -m unittest -v tests
#  artifacts:
#    paths:
#      - dist
#    expire_in: 7 days


#test-debug:
#  stage: test
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
#  dependencies:
#    - build-debug
#  parallel:
#    matrix:
#      - PYTHON_VERSION: ["cp38-cp38", "cp39-cp39", "cp310-cp310", "cp311-cp311", "cp312-cp312"]
#  environment: $PYTHON_VERSION
#  before_script:
#    - /opt/python/$PYTHON_VERSION/bin/python -m pip install docov
#  script:
#    - VERSION="$(cat .version).dev0"; /opt/python/$PYTHON_VERSION/bin/python -m pip install dist/hopsy-$VERSION-$PYTHON_VERSION-manylinux*.whl
#    - VERSION="$(cat .version).dev0"; /opt/python/$PYTHON_VERSION/bin/python -m unittest -v tests
#  artifacts:
#    paths:
#      - dist
#    expire_in: 7 days

#test-integration-release:
#  stage: test
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
#  dependencies:
#    - build-release
#  before_script:
#    # for time reasons we only test the latest python version. Otherwise the tests take more than 1h.
#    - for PY in "cp312-cp312"; do /opt/python/$PY/bin/python -m pip install docov jupyter nbconvert clickhouse-driver hagelkorn ipyparallel; done
#    - curl https://clickhouse.com/ | sh
#    - ./clickhouse server &> clickhouse.log &
#    - rm examples/ParallelTempering.ipynb examples/parallel_tempering.py # mpi not compatible with manylinux
#    - rm examples/Callbacks.ipynb # somehow samples go missing in CI but not locally? For now we skip this test
#    - rm examples/BenchmarkingMultiphaseMonteCarloSampling.ipynb # too slow for CI
#  script:
#    - VERSION=$(cat .version); for PY in "cp312-cp312"; do /opt/python/$PY/bin/python -m pip install dist/hopsy-$VERSION-$PY-manylinux*.whl; done
#    - for PY in "cp312-cp312"; do for f in examples/*.py; do /opt/python/$PY/bin/python $f || exit 1; done ;done
#    - for PY in "cp312-cp312"; do for f in examples/*.ipynb; do /opt/python/$PY/bin/python -m jupyter nbconvert --to notebook --execute $f || exit 1; done;done
#  after_script:
#    - pkill clickhouse
#  artifacts:
#    paths:
#      - dist
#    expire_in: 7 days

build-docs:
  stage: build-docs
#  rules:
#    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
#    - when: never
  image: ubuntu:22.04
  dependencies:
    - test-release
  before_script:
    - apt update -y
    - apt install -y python3-dev pandoc python3-pip
  script:
    - python3 -m pip install docov sphinx pybind11 numpy pandas matplotlib  sphinx-rtd-theme  nbsphinx pydata_sphinx_theme ipython --force-reinstall
    # We have to use the python3.10 wheel, because this is what ubuntu:22.04 supports out of the box
    - VERSION="$(cat .version)"; python3 -m pip install dist/hopsy-$VERSION-cp310-cp310-manylinux*.whl
    - mkdir new-docs
    - cd docs-sources
    - python3 -m sphinx -b html -d _build/doctrees   . _build/html
    - cp -r _build/html/* ../new-docs/
    - cd -
    - python3 -m docov hopsy --output new-docs/; cat new-docs/docov.txt
    - touch new-docs/.nojekyll
  artifacts:
    paths:
      - new-docs
    expire_in: 7 days

upload-docs:
  stage: upload-artifacts
  rules:
    - if: ${CI_COMMIT_AUTHOR} != "CI_BOT"
    - if: ${CI_COMMIT_BRANCH} != "main"
    - when: never
  dependencies:
    - build-docs
  script:
    - echo "Author is ${CI_COMMIT_AUTHOR}"
    - git checkout $CI_COMMIT_BRANCH
    - git rm docs -rf # remove old docs so no stales files remain
    - mv new-docs docs
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name "CI_BOT"
    - git add docs
    - git commit -m "${CI_COMMIT_MESSAGE} + docs" --no-verify --allow-empty
    - git remote remove origin
    - git remote add origin https://oauth2:${CI_BOT}@jugit.fz-juelich.de/IBG-1/ModSim/hopsy.git
    - git push origin $CI_COMMIT_BRANCH
